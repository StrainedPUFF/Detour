{"ast":null,"code":"import React,{useState,useRef,useEffect}from'react';import{Canvas,Image,util}from'fabric';import{useSession}from'./SessionContext';// Import the session context hook\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DocumentCanvas=_ref=>{let{documentUrl}=_ref;const{sessionId}=useSession();// Access the sessionId from the context\nconst canvasRef=useRef(null);const[canvas,setCanvas]=useState(null);// Tracks the Fabric.js canvas instance\nconst socket=useRef(null);const reconnectAttemptsRef=useRef(0);// Tracks reconnect attempts\nconst reconnectInterval=5000;// Reconnection interval (milliseconds)\nconst maxReconnectAttempts=5;// Max number of retry attempts\nuseEffect(()=>{console.log('Initializing the canvas...');const canvasInstance=new Canvas(canvasRef.current,{width:800,height:600});setCanvas(canvasInstance);// Load the document as the canvas background if a valid documentUrl is provided\nif(documentUrl){Image.fromURL(documentUrl,img=>{canvasInstance.setBackgroundImage(img,canvasInstance.renderAll.bind(canvasInstance),{crossOrigin:'anonymous'// Prevent cross-origin issues\n});console.log('Document URL successfully loaded:',documentUrl);},{crossOrigin:'anonymous'});}else{console.warn('No document URL provided.');}// Connect to the WebSocket server\nconst connectWebSocket=()=>{const webSocketUrl='wss://echo.websocket.events/';try{socket.current=new WebSocket(webSocketUrl);socket.current.onopen=()=>{console.log('WebSocket connection established to public server.');socket.current.send('Hello WebSocket Server!');};socket.current.onmessage=event=>{console.log('Received from WebSocket server:',event.data);};socket.current.onclose=()=>{console.warn('WebSocket connection closed.');};socket.current.onerror=error=>{console.error('WebSocket error:',error.message);};}catch(error){console.error('Failed to create WebSocket connection:',error.message);}};// const connectWebSocket = () => {\n//   if (!sessionId) {\n//     console.error('Session ID is undefined. Unable to initialize WebSocket.');\n//     return;\n//   }\n//   const webSocketUrl = `ws://127.0.0.1:8080/ws/session/${sessionId}/`;\n//   console.log('Attempting WebSocket connection to:', webSocketUrl);\n//   socket.current = new WebSocket(webSocketUrl);\n//   socket.current.onopen = () => {\n//     console.log('WebSocket connection established successfully.');\n//     reconnectAttemptsRef.current = 0; // Reset reconnect attempts\n//   };\n//   socket.current.onmessage = (event) => {\n//     const data = JSON.parse(event.data);\n//     if (data.type === 'draw') {\n//       console.log('Received drawing data:', data.payload);\n//       util.enlivenObjects([data.payload], (objects) => {\n//         objects.forEach((obj) => {\n//           if (canvasInstance) {\n//             canvasInstance.add(obj);\n//           }\n//         });\n//       });\n//     }\n//   };\n//   socket.current.onclose = () => {\n//     console.warn('WebSocket connection closed.');\n//     if (reconnectAttemptsRef.current < maxReconnectAttempts) {\n//       reconnectAttemptsRef.current += 1;\n//       console.warn(\n//         `Reconnecting... (${reconnectAttemptsRef.current}/${maxReconnectAttempts})`\n//       );\n//       setTimeout(connectWebSocket, reconnectInterval);\n//     } else {\n//       console.error('Max reconnection attempts reached. Unable to reconnect.');\n//     }\n//   };\n//   socket.current.onerror = (error) => {\n//     console.error('WebSocket encountered an error:', error.message);\n//   };\n// };\n// Establish WebSocket connection\nconnectWebSocket();// Enable drawing mode\ncanvasInstance.isDrawingMode=true;// Handle drawing events\ncanvasInstance.on('path:created',e=>{const path=e.path;emitObjectData(path);});// Emit data for WebSocket transmission\nconst emitObjectData=object=>{try{if(socket.current&&socket.current.readyState===WebSocket.OPEN){socket.current.send(JSON.stringify({type:'draw',payload:object.toJSON()}));console.log('Emitted object data:',object);}}catch(error){console.error('Error emitting object data:',error.message);}};// Cleanup on component unmount\nreturn()=>{console.log('Cleaning up canvas and WebSocket...');if(canvasInstance){canvasInstance.dispose();}if(socket.current){socket.current.close();}};},[documentUrl,sessionId]);// Reinitialize if documentUrl or sessionId changes\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef}),!documentUrl&&/*#__PURE__*/_jsx(\"p\",{style:{color:'red'},children:\"No document available to load. Please check the session data.\"})]});};export default DocumentCanvas;","map":{"version":3,"names":["React","useState","useRef","useEffect","Canvas","Image","util","useSession","jsx","_jsx","jsxs","_jsxs","DocumentCanvas","_ref","documentUrl","sessionId","canvasRef","canvas","setCanvas","socket","reconnectAttemptsRef","reconnectInterval","maxReconnectAttempts","console","log","canvasInstance","current","width","height","fromURL","img","setBackgroundImage","renderAll","bind","crossOrigin","warn","connectWebSocket","webSocketUrl","WebSocket","onopen","send","onmessage","event","data","onclose","onerror","error","message","isDrawingMode","on","e","path","emitObjectData","object","readyState","OPEN","JSON","stringify","type","payload","toJSON","dispose","close","children","ref","style","color"],"sources":["C:/Users/wesle/OneDrive/Documents/VLCS/myProject/VirtualLCS/frontend/src/DocumentCanvas.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { Canvas, Image, util } from 'fabric';\r\nimport { useSession } from './SessionContext'; // Import the session context hook\r\n\r\nconst DocumentCanvas = ({ documentUrl }) => {\r\n  const { sessionId } = useSession(); // Access the sessionId from the context\r\n  const canvasRef = useRef(null);\r\n  const [canvas, setCanvas] = useState(null); // Tracks the Fabric.js canvas instance\r\n  const socket = useRef(null);\r\n  const reconnectAttemptsRef = useRef(0); // Tracks reconnect attempts\r\n  const reconnectInterval = 5000; // Reconnection interval (milliseconds)\r\n  const maxReconnectAttempts = 5; // Max number of retry attempts\r\n\r\n  useEffect(() => {\r\n    console.log('Initializing the canvas...');\r\n    const canvasInstance = new Canvas(canvasRef.current, {\r\n      width: 800,\r\n      height: 600,\r\n    });\r\n    setCanvas(canvasInstance);\r\n\r\n    // Load the document as the canvas background if a valid documentUrl is provided\r\n    if (documentUrl) {\r\n      Image.fromURL(\r\n        documentUrl,\r\n        (img) => {\r\n          canvasInstance.setBackgroundImage(\r\n            img,\r\n            canvasInstance.renderAll.bind(canvasInstance),\r\n            {\r\n              crossOrigin: 'anonymous', // Prevent cross-origin issues\r\n            }\r\n          );\r\n          console.log('Document URL successfully loaded:', documentUrl);\r\n        },\r\n        { crossOrigin: 'anonymous' }\r\n      );\r\n    } else {\r\n      console.warn('No document URL provided.');\r\n    }\r\n\r\n    // Connect to the WebSocket server\r\n    const connectWebSocket = () => {\r\n      const webSocketUrl = 'wss://echo.websocket.events/';\r\n    \r\n      try {\r\n        socket.current = new WebSocket(webSocketUrl);\r\n    \r\n        socket.current.onopen = () => {\r\n          console.log('WebSocket connection established to public server.');\r\n          socket.current.send('Hello WebSocket Server!');\r\n        };\r\n    \r\n        socket.current.onmessage = (event) => {\r\n          console.log('Received from WebSocket server:', event.data);\r\n        };\r\n    \r\n        socket.current.onclose = () => {\r\n          console.warn('WebSocket connection closed.');\r\n        };\r\n    \r\n        socket.current.onerror = (error) => {\r\n          console.error('WebSocket error:', error.message);\r\n        };\r\n      } catch (error) {\r\n        console.error('Failed to create WebSocket connection:', error.message);\r\n      }\r\n    };\r\n    // const connectWebSocket = () => {\r\n    //   if (!sessionId) {\r\n    //     console.error('Session ID is undefined. Unable to initialize WebSocket.');\r\n    //     return;\r\n    //   }\r\n\r\n    //   const webSocketUrl = `ws://127.0.0.1:8080/ws/session/${sessionId}/`;\r\n    //   console.log('Attempting WebSocket connection to:', webSocketUrl);\r\n\r\n    //   socket.current = new WebSocket(webSocketUrl);\r\n\r\n    //   socket.current.onopen = () => {\r\n    //     console.log('WebSocket connection established successfully.');\r\n    //     reconnectAttemptsRef.current = 0; // Reset reconnect attempts\r\n    //   };\r\n\r\n    //   socket.current.onmessage = (event) => {\r\n    //     const data = JSON.parse(event.data);\r\n    //     if (data.type === 'draw') {\r\n    //       console.log('Received drawing data:', data.payload);\r\n    //       util.enlivenObjects([data.payload], (objects) => {\r\n    //         objects.forEach((obj) => {\r\n    //           if (canvasInstance) {\r\n    //             canvasInstance.add(obj);\r\n    //           }\r\n    //         });\r\n    //       });\r\n    //     }\r\n    //   };\r\n\r\n    //   socket.current.onclose = () => {\r\n    //     console.warn('WebSocket connection closed.');\r\n    //     if (reconnectAttemptsRef.current < maxReconnectAttempts) {\r\n    //       reconnectAttemptsRef.current += 1;\r\n    //       console.warn(\r\n    //         `Reconnecting... (${reconnectAttemptsRef.current}/${maxReconnectAttempts})`\r\n    //       );\r\n    //       setTimeout(connectWebSocket, reconnectInterval);\r\n    //     } else {\r\n    //       console.error('Max reconnection attempts reached. Unable to reconnect.');\r\n    //     }\r\n    //   };\r\n\r\n    //   socket.current.onerror = (error) => {\r\n    //     console.error('WebSocket encountered an error:', error.message);\r\n    //   };\r\n    // };\r\n\r\n    // Establish WebSocket connection\r\n    connectWebSocket();\r\n\r\n    // Enable drawing mode\r\n    canvasInstance.isDrawingMode = true;\r\n\r\n    // Handle drawing events\r\n    canvasInstance.on('path:created', (e) => {\r\n      const path = e.path;\r\n      emitObjectData(path);\r\n    });\r\n\r\n    // Emit data for WebSocket transmission\r\n    const emitObjectData = (object) => {\r\n      try {\r\n        if (socket.current && socket.current.readyState === WebSocket.OPEN) {\r\n          socket.current.send(\r\n            JSON.stringify({\r\n              type: 'draw',\r\n              payload: object.toJSON(),\r\n            })\r\n          );\r\n          console.log('Emitted object data:', object);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error emitting object data:', error.message);\r\n      }\r\n    };\r\n\r\n    // Cleanup on component unmount\r\n    return () => {\r\n      console.log('Cleaning up canvas and WebSocket...');\r\n      if (canvasInstance) {\r\n        canvasInstance.dispose();\r\n      }\r\n      if (socket.current) {\r\n        socket.current.close();\r\n      }\r\n    };\r\n  }, [documentUrl, sessionId]); // Reinitialize if documentUrl or sessionId changes\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef} />\r\n      {!documentUrl && (\r\n        <p style={{ color: 'red' }}>No document available to load. Please check the session data.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DocumentCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}