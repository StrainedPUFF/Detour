{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wesle\\\\OneDrive\\\\Documents\\\\VLCS\\\\myProject\\\\VirtualLCS\\\\frontend\\\\src\\\\AudioChat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioChat = ({\n  sessionId\n}) => {\n  _s();\n  const audioRef = useRef(null);\n  const peerConnections = {};\n  const config = {\n    iceServers: [{\n      urls: 'stun:stun.l.google.com:19302'\n    }]\n  };\n  const socket = useRef(io('http://localhost:8080')).current; // Ref to persist socket instance\n\n  // Memoized functions to prevent re-creation\n  const handleOffer = useCallback(offer => {\n    const peerConnection = new RTCPeerConnection(config);\n    peerConnections[offer.sender] = peerConnection;\n    peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n    });\n    peerConnection.createAnswer().then(answer => {\n      peerConnection.setLocalDescription(answer);\n      socket.emit('answer', {\n        type: 'answer',\n        sdp: answer,\n        sender: socket.id\n      });\n    });\n    peerConnection.ontrack = handleTrackEvent;\n    peerConnection.onicecandidate = handleICECandidateEvent;\n  }, [peerConnections, socket]);\n  const handleAnswer = useCallback(answer => {\n    const peerConnection = peerConnections[answer.sender];\n    peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n  }, [peerConnections]);\n  const handleNewICECandidateMsg = useCallback(msg => {\n    const candidate = new RTCIceCandidate(msg.candidate);\n    const peerConnection = peerConnections[msg.sender];\n    peerConnection.addIceCandidate(candidate);\n  }, [peerConnections]);\n  const handleTrackEvent = useCallback(event => {\n    audioRef.current.srcObject = event.streams[0];\n  }, []);\n  const handleICECandidateEvent = useCallback(event => {\n    if (event.candidate) {\n      socket.emit('ice-candidate', {\n        type: 'candidate',\n        candidate: event.candidate,\n        sender: socket.id\n      });\n    }\n  }, [socket]);\n  useEffect(() => {\n    socket.on('offer', handleOffer);\n    socket.on('answer', handleAnswer);\n    socket.on('ice-candidate', handleNewICECandidateMsg);\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      audioRef.current.srcObject = stream;\n      socket.emit('join', sessionId);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, [socket, handleOffer, handleAnswer, handleNewICECandidateMsg, sessionId]);\n  return /*#__PURE__*/_jsxDEV(\"audio\", {\n    ref: audioRef,\n    autoPlay: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 10\n  }, this);\n};\n_s(AudioChat, \"2MV7HlqucxnOkUc1dGZta27AdQk=\");\n_c = AudioChat;\nexport default AudioChat;\nvar _c;\n$RefreshReg$(_c, \"AudioChat\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","io","jsxDEV","_jsxDEV","AudioChat","sessionId","_s","audioRef","peerConnections","config","iceServers","urls","socket","current","handleOffer","offer","peerConnection","RTCPeerConnection","sender","setRemoteDescription","RTCSessionDescription","navigator","mediaDevices","getUserMedia","audio","then","stream","getTracks","forEach","track","addTrack","createAnswer","answer","setLocalDescription","emit","type","sdp","id","ontrack","handleTrackEvent","onicecandidate","handleICECandidateEvent","handleAnswer","handleNewICECandidateMsg","msg","candidate","RTCIceCandidate","addIceCandidate","event","srcObject","streams","on","disconnect","ref","autoPlay","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/wesle/OneDrive/Documents/VLCS/myProject/VirtualLCS/frontend/src/AudioChat.jsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst AudioChat = ({ sessionId }) => {\r\n  const audioRef = useRef(null);\r\n  const peerConnections = {};\r\n  const config = { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] };\r\n  const socket = useRef(io('http://localhost:8080')).current; // Ref to persist socket instance\r\n\r\n  // Memoized functions to prevent re-creation\r\n  const handleOffer = useCallback((offer) => {\r\n    const peerConnection = new RTCPeerConnection(config);\r\n    peerConnections[offer.sender] = peerConnection;\r\n    peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(stream => {\r\n        stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\r\n      });\r\n    peerConnection.createAnswer()\r\n      .then(answer => {\r\n        peerConnection.setLocalDescription(answer);\r\n        socket.emit('answer', { type: 'answer', sdp: answer, sender: socket.id });\r\n      });\r\n    peerConnection.ontrack = handleTrackEvent;\r\n    peerConnection.onicecandidate = handleICECandidateEvent;\r\n  }, [peerConnections, socket]);\r\n\r\n  const handleAnswer = useCallback((answer) => {\r\n    const peerConnection = peerConnections[answer.sender];\r\n    peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n  }, [peerConnections]);\r\n\r\n  const handleNewICECandidateMsg = useCallback((msg) => {\r\n    const candidate = new RTCIceCandidate(msg.candidate);\r\n    const peerConnection = peerConnections[msg.sender];\r\n    peerConnection.addIceCandidate(candidate);\r\n  }, [peerConnections]);\r\n\r\n  const handleTrackEvent = useCallback((event) => {\r\n    audioRef.current.srcObject = event.streams[0];\r\n  }, []);\r\n\r\n  const handleICECandidateEvent = useCallback((event) => {\r\n    if (event.candidate) {\r\n      socket.emit('ice-candidate', { type: 'candidate', candidate: event.candidate, sender: socket.id });\r\n    }\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    socket.on('offer', handleOffer);\r\n    socket.on('answer', handleAnswer);\r\n    socket.on('ice-candidate', handleNewICECandidateMsg);\r\n\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(stream => {\r\n        audioRef.current.srcObject = stream;\r\n        socket.emit('join', sessionId);\r\n      });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, [socket, handleOffer, handleAnswer, handleNewICECandidateMsg, sessionId]);\r\n\r\n  return <audio ref={audioRef} autoPlay />;\r\n};\r\n\r\nexport default AudioChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}