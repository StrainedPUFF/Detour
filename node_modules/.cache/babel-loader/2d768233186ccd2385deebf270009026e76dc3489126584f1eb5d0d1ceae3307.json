{"ast":null,"code":"import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";// import React, { createContext, useState, useContext } from 'react';\n// import FetchSessionData from './FetchSessionData'; // Ensure correct path\n// const SessionContext = createContext();\n// export const SessionProvider = ({ children }) => {\n//   const [sessionData, setSessionData] = useState({ sessionId: null, documentUrl: null });\n//   const handleSessionData = (data) => {\n//     console.log('Setting session data:', data);\n//     setSessionData({\n//       sessionId: data.id, // Use `id` as sessionId\n//       documentUrl: data.document, // Use `document` for the document URL\n//     });\n//   };\n//   return (\n//     <>\n//       <FetchSessionData onSessionData={handleSessionData} />\n//       <SessionContext.Provider value={sessionData}>\n//         {children}\n//       </SessionContext.Provider>\n//     </>\n//   );\n// };\n// export const useSession = () => useContext(SessionContext);\nexport const SessionProvider=_ref=>{let{children}=_ref;const[sessionData,setSessionData]=useState(null);const handleSessionData=data=>{setSessionData({sessionId:data.id,documentUrl:data.document});};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(FetchSessionData,{onSessionData:handleSessionData}),sessionData?/*#__PURE__*/_jsx(SessionContext.Provider,{value:sessionData,children:children}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading session...\"})]});};","map":{"version":3,"names":["SessionProvider","_ref","children","sessionData","setSessionData","useState","handleSessionData","data","sessionId","id","documentUrl","document","_jsxs","_Fragment","_jsx","FetchSessionData","onSessionData","SessionContext","Provider","value"],"sources":["C:/Users/wesle/OneDrive/Documents/VLCS/myProject/VirtualLCS/frontend/src/SessionContext.jsx"],"sourcesContent":["// import React, { createContext, useState, useContext } from 'react';\r\n// import FetchSessionData from './FetchSessionData'; // Ensure correct path\r\n\r\n// const SessionContext = createContext();\r\n\r\n// export const SessionProvider = ({ children }) => {\r\n//   const [sessionData, setSessionData] = useState({ sessionId: null, documentUrl: null });\r\n\r\n//   const handleSessionData = (data) => {\r\n//     console.log('Setting session data:', data);\r\n//     setSessionData({\r\n//       sessionId: data.id, // Use `id` as sessionId\r\n//       documentUrl: data.document, // Use `document` for the document URL\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <FetchSessionData onSessionData={handleSessionData} />\r\n//       <SessionContext.Provider value={sessionData}>\r\n//         {children}\r\n//       </SessionContext.Provider>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export const useSession = () => useContext(SessionContext);\r\n\r\nexport const SessionProvider = ({ children }) => {\r\n  const [sessionData, setSessionData] = useState(null);\r\n\r\n  const handleSessionData = (data) => {\r\n    setSessionData({\r\n      sessionId: data.id,\r\n      documentUrl: data.document,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FetchSessionData onSessionData={handleSessionData} />\r\n      {sessionData ? (\r\n        <SessionContext.Provider value={sessionData}>\r\n          {children}\r\n        </SessionContext.Provider>\r\n      ) : (\r\n        <p>Loading session...</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n"],"mappings":"+EAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,MAAO,MAAM,CAAAA,eAAe,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC1C,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGC,QAAQ,CAAC,IAAI,CAAC,CAEpD,KAAM,CAAAC,iBAAiB,CAAIC,IAAI,EAAK,CAClCH,cAAc,CAAC,CACbI,SAAS,CAAED,IAAI,CAACE,EAAE,CAClBC,WAAW,CAAEH,IAAI,CAACI,QACpB,CAAC,CAAC,CACJ,CAAC,CAED,mBACEC,KAAA,CAAAC,SAAA,EAAAX,QAAA,eACEY,IAAA,CAACC,gBAAgB,EAACC,aAAa,CAAEV,iBAAkB,CAAE,CAAC,CACrDH,WAAW,cACVW,IAAA,CAACG,cAAc,CAACC,QAAQ,EAACC,KAAK,CAAEhB,WAAY,CAAAD,QAAA,CACzCA,QAAQ,CACc,CAAC,cAE1BY,IAAA,MAAAZ,QAAA,CAAG,oBAAkB,CAAG,CACzB,EACD,CAAC,CAEP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}