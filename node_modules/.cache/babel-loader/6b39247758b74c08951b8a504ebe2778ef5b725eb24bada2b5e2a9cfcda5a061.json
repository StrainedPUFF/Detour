{"ast":null,"code":"import React,{useRef,useEffect,useCallback,useState}from'react';import{useSession}from'./SessionContext';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AudioChat=()=>{const{sessionId}=useSession();const audioRef=useRef(null);const socket=useRef(null);const[isMuted,setIsMuted]=useState(false);// Utility to convert PCM data to WAV format\nconst createWAV=pcmData=>{const sampleRate=44100;// Example sample rate\nconst numChannels=1;// Mono audio\nconst wavHeader=new Uint8Array(44);// RIFF header size\nconst wavBody=new Float32Array(pcmData);// Fill WAV header\nconst dataSize=wavBody.length*2;// PCM data size (bytes)\nconst totalSize=dataSize+44;const dataView=new DataView(wavHeader.buffer);dataView.setUint32(0,0x52494646);// \"RIFF\"\ndataView.setUint32(4,totalSize-8,true);// File size - 8\ndataView.setUint32(8,0x57415645);// \"WAVE\"\ndataView.setUint32(12,0x666d7420);// \"fmt \"\ndataView.setUint32(16,16,true);// PCM chunk size\ndataView.setUint16(20,1,true);// Audio format (1=PCM)\ndataView.setUint16(22,numChannels,true);// Number of channels\ndataView.setUint32(24,sampleRate,true);// Sample rate\ndataView.setUint32(28,sampleRate*numChannels*2,true);// Byte rate\ndataView.setUint16(32,numChannels*2,true);// Block align\ndataView.setUint16(34,16,true);// Bits per sample\ndataView.setUint32(36,0x64617461);// \"data\"\ndataView.setUint32(40,dataSize,true);// PCM data size\n// Combine header and body\nreturn new Blob([wavHeader,new Uint16Array(wavBody.map(x=>x*32767))],{type:'audio/wav'});};// Wrap playAudio in useCallback\nconst playAudio=useCallback(pcmData=>{try{// Convert the received audio data object to a Float32Array\nconst floatArray=new Float32Array(Object.values(pcmData));// Convert PCM to WAV format\nconst wavBlob=createWAV(floatArray);const audioContext=new AudioContext();// Ensure the AudioContext is running\nif(audioContext.state==='suspended'){audioContext.resume();}const reader=new FileReader();reader.onload=()=>{const arrayBuffer=reader.result;// Decode and play the WAV data\naudioContext.decodeAudioData(arrayBuffer).then(decodedData=>{const source=audioContext.createBufferSource();source.buffer=decodedData;source.connect(audioContext.destination);source.start();}).catch(error=>{console.error(\"Error decoding audio data:\",error);});};reader.readAsArrayBuffer(wavBlob);// Read the WAV Blob as ArrayBuffer\n}catch(error){console.error(\"Error playing audio:\",error.message);}},[]);// Add dependencies if needed\nconst connectWebSocket=useCallback(()=>{if(!sessionId){console.error('Session ID is undefined. Unable to initialize WebSocket.');return;}// Initialize WebSocket connection\nsocket.current=new WebSocket(`ws://127.0.0.1:8080/ws/session/${sessionId}/`);socket.current.onopen=()=>{console.log('WebSocket connection established');};socket.current.onmessage=event=>{const data=JSON.parse(event.data);if(data.type==='audio'){console.log('Audio data received:',data.payload);playAudio(data.payload);// Play received audio\n}};socket.current.onclose=()=>{console.warn('WebSocket disconnected.');};socket.current.onerror=error=>{console.error('WebSocket error:',error.message);};},[sessionId,playAudio]);// Include playAudio in dependencies\nuseEffect(()=>{connectWebSocket();return()=>{var _socket$current;(_socket$current=socket.current)===null||_socket$current===void 0?void 0:_socket$current.close();};},[connectWebSocket]);// Function to capture and send audio data\nconst startAudioCapture=async()=>{try{const stream=await navigator.mediaDevices.getUserMedia({audio:true});// Corrected method name\n// Attach the captured audio stream to the audioRef element\naudioRef.current.srcObject=stream;const audioContext=new AudioContext();// Load the audio processor\nawait audioContext.audioWorklet.addModule('audio-processor.js');const audioProcessor=new AudioWorkletNode(audioContext,'audio-processor');const input=audioContext.createMediaStreamSource(stream);input.connect(audioProcessor);audioProcessor.connect(audioContext.destination);// Send audio data to the WebSocket\naudioProcessor.port.onmessage=event=>{const audioChunk=event.data;if(socket.current){socket.current.send(JSON.stringify({type:'audio',payload:audioChunk}));}};}catch(error){console.error('Error capturing audio:',error.message);}};const toggleMute=()=>{var _audioRef$current;if((_audioRef$current=audioRef.current)!==null&&_audioRef$current!==void 0&&_audioRef$current.srcObject){const audioTracks=audioRef.current.srcObject.getAudioTracks();audioTracks.forEach(track=>track.enabled=!isMuted);setIsMuted(!isMuted);}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"audio\",{ref:audioRef,autoPlay:true}),/*#__PURE__*/_jsx(\"button\",{onClick:toggleMute,children:isMuted?'Unmute':'Mute'}),/*#__PURE__*/_jsx(\"button\",{onClick:startAudioCapture,children:\"Start Audio\"})]});};export default AudioChat;","map":{"version":3,"names":["React","useRef","useEffect","useCallback","useState","useSession","jsx","_jsx","jsxs","_jsxs","AudioChat","sessionId","audioRef","socket","isMuted","setIsMuted","createWAV","pcmData","sampleRate","numChannels","wavHeader","Uint8Array","wavBody","Float32Array","dataSize","length","totalSize","dataView","DataView","buffer","setUint32","setUint16","Blob","Uint16Array","map","x","type","playAudio","floatArray","Object","values","wavBlob","audioContext","AudioContext","state","resume","reader","FileReader","onload","arrayBuffer","result","decodeAudioData","then","decodedData","source","createBufferSource","connect","destination","start","catch","error","console","readAsArrayBuffer","message","connectWebSocket","current","WebSocket","onopen","log","onmessage","event","data","JSON","parse","payload","onclose","warn","onerror","_socket$current","close","startAudioCapture","stream","navigator","mediaDevices","getUserMedia","audio","srcObject","audioWorklet","addModule","audioProcessor","AudioWorkletNode","input","createMediaStreamSource","port","audioChunk","send","stringify","toggleMute","_audioRef$current","audioTracks","getAudioTracks","forEach","track","enabled","children","ref","autoPlay","onClick"],"sources":["C:/Users/wesle/OneDrive/Documents/VLCS/myProject/VirtualLCS/frontend/src/AudioChat.jsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback, useState } from 'react';\r\nimport { useSession } from './SessionContext';\r\n\r\nconst AudioChat = () => {\r\n  const { sessionId } = useSession();\r\n  const audioRef = useRef(null);\r\n  const socket = useRef(null);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n\r\n  // Utility to convert PCM data to WAV format\r\n  const createWAV = (pcmData) => {\r\n    const sampleRate = 44100; // Example sample rate\r\n    const numChannels = 1; // Mono audio\r\n\r\n    const wavHeader = new Uint8Array(44); // RIFF header size\r\n    const wavBody = new Float32Array(pcmData);\r\n\r\n    // Fill WAV header\r\n    const dataSize = wavBody.length * 2; // PCM data size (bytes)\r\n    const totalSize = dataSize + 44;\r\n\r\n    const dataView = new DataView(wavHeader.buffer);\r\n    dataView.setUint32(0, 0x52494646); // \"RIFF\"\r\n    dataView.setUint32(4, totalSize - 8, true); // File size - 8\r\n    dataView.setUint32(8, 0x57415645); // \"WAVE\"\r\n    dataView.setUint32(12, 0x666d7420); // \"fmt \"\r\n    dataView.setUint32(16, 16, true); // PCM chunk size\r\n    dataView.setUint16(20, 1, true); // Audio format (1=PCM)\r\n    dataView.setUint16(22, numChannels, true); // Number of channels\r\n    dataView.setUint32(24, sampleRate, true); // Sample rate\r\n    dataView.setUint32(28, sampleRate * numChannels * 2, true); // Byte rate\r\n    dataView.setUint16(32, numChannels * 2, true); // Block align\r\n    dataView.setUint16(34, 16, true); // Bits per sample\r\n    dataView.setUint32(36, 0x64617461); // \"data\"\r\n    dataView.setUint32(40, dataSize, true); // PCM data size\r\n\r\n    // Combine header and body\r\n    return new Blob([wavHeader, new Uint16Array(wavBody.map(x => x * 32767))], { type: 'audio/wav' });\r\n  };\r\n\r\n  // Wrap playAudio in useCallback\r\n  const playAudio = useCallback((pcmData) => {\r\n    try {\r\n      // Convert the received audio data object to a Float32Array\r\n      const floatArray = new Float32Array(Object.values(pcmData));\r\n\r\n      // Convert PCM to WAV format\r\n      const wavBlob = createWAV(floatArray);\r\n\r\n      const audioContext = new AudioContext();\r\n\r\n      // Ensure the AudioContext is running\r\n      if (audioContext.state === 'suspended') {\r\n        audioContext.resume();\r\n      }\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const arrayBuffer = reader.result;\r\n\r\n        // Decode and play the WAV data\r\n        audioContext.decodeAudioData(arrayBuffer).then((decodedData) => {\r\n          const source = audioContext.createBufferSource();\r\n          source.buffer = decodedData;\r\n          source.connect(audioContext.destination);\r\n          source.start();\r\n        }).catch((error) => {\r\n          console.error(\"Error decoding audio data:\", error);\r\n        });\r\n      };\r\n\r\n      reader.readAsArrayBuffer(wavBlob); // Read the WAV Blob as ArrayBuffer\r\n    } catch (error) {\r\n      console.error(\"Error playing audio:\", error.message);\r\n    }\r\n  }, []); // Add dependencies if needed\r\n\r\n  const connectWebSocket = useCallback(() => {\r\n    if (!sessionId) {\r\n      console.error('Session ID is undefined. Unable to initialize WebSocket.');\r\n      return;\r\n    }\r\n\r\n    // Initialize WebSocket connection\r\n    socket.current = new WebSocket(`ws://127.0.0.1:8080/ws/session/${sessionId}/`);\r\n\r\n    socket.current.onopen = () => {\r\n      console.log('WebSocket connection established');\r\n    };\r\n\r\n    socket.current.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n\r\n      if (data.type === 'audio') {\r\n        console.log('Audio data received:', data.payload);\r\n        playAudio(data.payload); // Play received audio\r\n      }\r\n    };\r\n\r\n    socket.current.onclose = () => {\r\n      console.warn('WebSocket disconnected.');\r\n    };\r\n\r\n    socket.current.onerror = (error) => {\r\n      console.error('WebSocket error:', error.message);\r\n    };\r\n  }, [sessionId, playAudio]); // Include playAudio in dependencies\r\n\r\n  useEffect(() => {\r\n    connectWebSocket();\r\n\r\n    return () => {\r\n      socket.current?.close();\r\n    };\r\n  }, [connectWebSocket]);\r\n\r\n  // Function to capture and send audio data\r\n  const startAudioCapture = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true }); // Corrected method name\r\n  \r\n      // Attach the captured audio stream to the audioRef element\r\n      audioRef.current.srcObject = stream;\r\n  \r\n      const audioContext = new AudioContext();\r\n  \r\n      // Load the audio processor\r\n      await audioContext.audioWorklet.addModule('audio-processor.js');\r\n      const audioProcessor = new AudioWorkletNode(audioContext, 'audio-processor');\r\n  \r\n      const input = audioContext.createMediaStreamSource(stream);\r\n      input.connect(audioProcessor);\r\n      audioProcessor.connect(audioContext.destination);\r\n  \r\n      // Send audio data to the WebSocket\r\n      audioProcessor.port.onmessage = (event) => {\r\n        const audioChunk = event.data;\r\n        if (socket.current) {\r\n          socket.current.send(JSON.stringify({\r\n            type: 'audio',\r\n            payload: audioChunk,\r\n          }));\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error capturing audio:', error.message);\r\n    }\r\n  };\r\n\r\n  const toggleMute = () => {\r\n    if (audioRef.current?.srcObject) {\r\n      const audioTracks = audioRef.current.srcObject.getAudioTracks();\r\n      audioTracks.forEach((track) => (track.enabled = !isMuted));\r\n      setIsMuted(!isMuted);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <audio ref={audioRef} autoPlay />\r\n      <button onClick={toggleMute}>{isMuted ? 'Unmute' : 'Mute'}</button>\r\n      <button onClick={startAudioCapture}>Start Audio</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioChat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}