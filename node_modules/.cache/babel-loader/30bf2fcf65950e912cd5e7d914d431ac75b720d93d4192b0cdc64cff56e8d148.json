{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wesle\\\\OneDrive\\\\Documents\\\\VLCS\\\\myProject\\\\VirtualLCS\\\\frontend\\\\src\\\\AudioChat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback, useState } from 'react';\nimport { useSession } from './SessionContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioChat = () => {\n  _s();\n  const {\n    sessionId\n  } = useSession();\n  const audioRef = useRef(null);\n  const socket = useRef(null);\n  const [isMuted, setIsMuted] = useState(false);\n  const connectWebSocket = useCallback(() => {\n    if (!sessionId) {\n      console.error('Session ID is undefined. Unable to initialize WebSocket.');\n      return;\n    }\n\n    // Initialize WebSocket connection\n    socket.current = new WebSocket(`ws://127.0.0.1:8080/ws/session/${sessionId}/`);\n    socket.current.onopen = () => {\n      console.log('WebSocket connection established');\n    };\n    socket.current.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'audio') {\n        console.log('Audio data received:', data.payload);\n        // Handle received audio data (e.g., decode and play)\n        playAudio(data.payload);\n      }\n    };\n    socket.current.onclose = () => {\n      console.warn('WebSocket disconnected.');\n    };\n    socket.current.onerror = error => {\n      console.error('WebSocket error:', error.message);\n    };\n  }, [sessionId]);\n  useEffect(() => {\n    connectWebSocket();\n    return () => {\n      var _socket$current;\n      (_socket$current = socket.current) === null || _socket$current === void 0 ? void 0 : _socket$current.close();\n    };\n  }, [connectWebSocket]);\n\n  // Function to capture and send audio data\n  const startAudioCapture = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const audioContext = new AudioContext();\n      const input = audioContext.createMediaStreamSource(stream);\n      const processor = audioContext.createScriptProcessor(1024, 1, 1);\n      processor.onaudioprocess = e => {\n        const audioChunk = e.inputBuffer.getChannelData(0); // Raw audio data\n        if (socket.current) {\n          socket.current.send(JSON.stringify({\n            type: 'audio',\n            payload: audioChunk\n          }));\n        }\n      };\n      input.connect(processor);\n      processor.connect(audioContext.destination);\n    } catch (error) {\n      console.error('Error capturing audio:', error.message);\n    }\n  };\n\n  // Function to play incoming audio\n  const playAudio = audioBuffer => {\n    try {\n      const audioContext = new AudioContext();\n      const buffer = audioContext.createBuffer(1, audioBuffer.length, audioContext.sampleRate);\n      buffer.copyToChannel(audioBuffer, 0);\n      const source = audioContext.createBufferSource();\n      source.buffer = buffer;\n      source.connect(audioContext.destination);\n      source.start();\n    } catch (error) {\n      console.error('Error playing audio:', error.message);\n    }\n  };\n  const toggleMute = () => {\n    var _audioRef$current;\n    if ((_audioRef$current = audioRef.current) !== null && _audioRef$current !== void 0 && _audioRef$current.srcObject) {\n      const audioTracks = audioRef.current.srcObject.getAudioTracks();\n      audioTracks.forEach(track => track.enabled = !isMuted);\n      setIsMuted(!isMuted);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleMute,\n      children: isMuted ? 'Unmute' : 'Mute'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startAudioCapture,\n      children: \"Start Audio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioChat, \"XzpHZhh3M/v7Rykrcin+2gjorCw=\", false, function () {\n  return [useSession];\n});\n_c = AudioChat;\nexport default AudioChat;\nvar _c;\n$RefreshReg$(_c, \"AudioChat\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","useState","useSession","jsxDEV","_jsxDEV","AudioChat","_s","sessionId","audioRef","socket","isMuted","setIsMuted","connectWebSocket","console","error","current","WebSocket","onopen","log","onmessage","event","data","JSON","parse","type","payload","playAudio","onclose","warn","onerror","message","_socket$current","close","startAudioCapture","stream","navigator","mediaDevices","getUserMedia","audio","audioContext","AudioContext","input","createMediaStreamSource","processor","createScriptProcessor","onaudioprocess","e","audioChunk","inputBuffer","getChannelData","send","stringify","connect","destination","audioBuffer","buffer","createBuffer","length","sampleRate","copyToChannel","source","createBufferSource","start","toggleMute","_audioRef$current","srcObject","audioTracks","getAudioTracks","forEach","track","enabled","children","ref","autoPlay","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/wesle/OneDrive/Documents/VLCS/myProject/VirtualLCS/frontend/src/AudioChat.jsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback, useState } from 'react';\r\nimport { useSession } from './SessionContext';\r\n\r\nconst AudioChat = () => {\r\n  const { sessionId } = useSession();\r\n  const audioRef = useRef(null);\r\n  const socket = useRef(null);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n\r\n  const connectWebSocket = useCallback(() => {\r\n    if (!sessionId) {\r\n      console.error('Session ID is undefined. Unable to initialize WebSocket.');\r\n      return;\r\n    }\r\n\r\n    // Initialize WebSocket connection\r\n    socket.current = new WebSocket(`ws://127.0.0.1:8080/ws/session/${sessionId}/`);\r\n\r\n    socket.current.onopen = () => {\r\n      console.log('WebSocket connection established');\r\n    };\r\n\r\n    socket.current.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n\r\n      if (data.type === 'audio') {\r\n        console.log('Audio data received:', data.payload);\r\n        // Handle received audio data (e.g., decode and play)\r\n        playAudio(data.payload);\r\n      }\r\n    };\r\n\r\n    socket.current.onclose = () => {\r\n      console.warn('WebSocket disconnected.');\r\n    };\r\n\r\n    socket.current.onerror = (error) => {\r\n      console.error('WebSocket error:', error.message);\r\n    };\r\n  }, [sessionId]);\r\n\r\n  useEffect(() => {\r\n    connectWebSocket();\r\n\r\n    return () => {\r\n      socket.current?.close();\r\n    };\r\n  }, [connectWebSocket]);\r\n\r\n  // Function to capture and send audio data\r\n  const startAudioCapture = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      const audioContext = new AudioContext();\r\n      const input = audioContext.createMediaStreamSource(stream);\r\n      const processor = audioContext.createScriptProcessor(1024, 1, 1);\r\n\r\n      processor.onaudioprocess = (e) => {\r\n        const audioChunk = e.inputBuffer.getChannelData(0); // Raw audio data\r\n        if (socket.current) {\r\n          socket.current.send(JSON.stringify({\r\n            type: 'audio',\r\n            payload: audioChunk,\r\n          }));\r\n        }\r\n      };\r\n\r\n      input.connect(processor);\r\n      processor.connect(audioContext.destination);\r\n    } catch (error) {\r\n      console.error('Error capturing audio:', error.message);\r\n    }\r\n  };\r\n\r\n  // Function to play incoming audio\r\n  const playAudio = (audioBuffer) => {\r\n    try {\r\n      const audioContext = new AudioContext();\r\n      const buffer = audioContext.createBuffer(1, audioBuffer.length, audioContext.sampleRate);\r\n      buffer.copyToChannel(audioBuffer, 0);\r\n\r\n      const source = audioContext.createBufferSource();\r\n      source.buffer = buffer;\r\n      source.connect(audioContext.destination);\r\n      source.start();\r\n    } catch (error) {\r\n      console.error('Error playing audio:', error.message);\r\n    }\r\n  };\r\n\r\n  const toggleMute = () => {\r\n    if (audioRef.current?.srcObject) {\r\n      const audioTracks = audioRef.current.srcObject.getAudioTracks();\r\n      audioTracks.forEach((track) => (track.enabled = !isMuted));\r\n      setIsMuted(!isMuted);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <audio ref={audioRef} autoPlay />\r\n      <button onClick={toggleMute}>{isMuted ? 'Unmute' : 'Mute'}</button>\r\n      <button onClick={startAudioCapture}>Start Audio</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}