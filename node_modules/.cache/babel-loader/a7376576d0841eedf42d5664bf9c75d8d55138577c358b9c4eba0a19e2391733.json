{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wesle\\\\OneDrive\\\\Documents\\\\VLCS\\\\myProject\\\\VirtualLCS\\\\frontend\\\\src\\\\AudioChat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback, useState, useMemo } from 'react';\nimport { useSession } from './SessionContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioChat = () => {\n  _s();\n  const {\n    sessionId\n  } = useSession();\n  const audioRef = useRef(null);\n  const socket = useRef(null);\n  const peerConnections = useRef({});\n  const [isMuted, setIsMuted] = useState(false);\n  const reconnectInterval = 5000;\n  const maxReconnectAttempts = 5;\n  const reconnectAttemptsRef = useRef(0);\n  const config = useMemo(() => ({\n    iceServers: [{\n      urls: 'stun:stun.l.google.com:19302'\n    }]\n  }), []);\n  const handleOffer = useCallback(offer => {\n    console.log('Received offer:', offer); // Debugging tip\n    const peerConnection = new RTCPeerConnection(config);\n    peerConnections.current[offer.sender] = peerConnection;\n    peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      console.log('User media stream:', stream); // Debugging tip\n      stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n    }).catch(error => console.error('Error accessing user media:', error.message));\n    peerConnection.createAnswer().then(answer => {\n      console.log('Created answer:', answer); // Debugging tip\n      peerConnection.setLocalDescription(answer);\n      socket.current.send(JSON.stringify({\n        type: 'answer',\n        sdp: answer,\n        sender: 'client'\n      }));\n    });\n    peerConnection.ontrack = event => {\n      console.log('Remote stream:', event.streams[0]); // Debugging tip\n      audioRef.current.srcObject = event.streams[0];\n    };\n    peerConnection.onicecandidate = event => {\n      console.log('ICE candidate:', event.candidate); // Debugging tip\n      if (event.candidate) {\n        socket.current.send(JSON.stringify({\n          type: 'ice-candidate',\n          candidate: event.candidate,\n          sender: 'client'\n        }));\n      }\n    };\n  }, [config]);\n  const handleAnswer = useCallback(answer => {\n    console.log('Received answer:', answer); // Debugging tip\n    const peerConnection = peerConnections.current[answer.sender];\n    if (peerConnection) {\n      peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n    }\n  }, []);\n  const handleNewICECandidateMsg = useCallback(msg => {\n    console.log('Received ICE candidate message:', msg); // Debugging tip\n    const candidate = new RTCIceCandidate(msg.candidate);\n    const peerConnection = peerConnections.current[msg.sender];\n    if (peerConnection) {\n      peerConnection.addIceCandidate(candidate);\n    }\n  }, []);\n  const connectWebSocket = useCallback(() => {\n    if (!sessionId) {\n      console.error('Session ID is undefined. Unable to initialize WebSocket.');\n      return;\n    }\n    socket.current = new WebSocket(`ws://127.0.0.1:8080/ws/session/${sessionId}/`);\n    socket.current.onopen = () => {\n      console.log('WebSocket connection established'); // Debugging tip\n      reconnectAttemptsRef.current = 0;\n      socket.current.send(JSON.stringify({\n        type: 'join',\n        sessionId\n      }));\n    };\n    socket.current.onmessage = event => {\n      const data = JSON.parse(event.data);\n      console.log('WebSocket message received:', data); // Debugging tip\n      if (data.type === 'offer') handleOffer(data);\n      if (data.type === 'answer') handleAnswer(data);\n      if (data.type === 'ice-candidate') handleNewICECandidateMsg(data);\n    };\n    socket.current.onclose = () => {\n      console.warn('WebSocket disconnected.');\n      if (reconnectAttemptsRef.current < maxReconnectAttempts) {\n        reconnectAttemptsRef.current += 1;\n        console.warn(`Attempting to reconnect (${reconnectAttemptsRef.current}/${maxReconnectAttempts})...`);\n        setTimeout(connectWebSocket, reconnectInterval);\n      } else {\n        console.error('Max reconnect attempts reached. Unable to reconnect WebSocket.');\n      }\n    };\n    socket.current.onerror = error => {\n      console.error('WebSocket error:', error.message);\n    };\n  }, [sessionId, handleOffer, handleAnswer, handleNewICECandidateMsg]);\n  useEffect(() => {\n    connectWebSocket();\n    const currentPeerConnections = peerConnections.current;\n    return () => {\n      var _socket$current;\n      (_socket$current = socket.current) === null || _socket$current === void 0 ? void 0 : _socket$current.close();\n      Object.values(currentPeerConnections).forEach(peerConnection => peerConnection.close());\n    };\n  }, [connectWebSocket]);\n  const toggleMute = () => {\n    var _audioRef$current$src;\n    const audioTracks = (_audioRef$current$src = audioRef.current.srcObject) === null || _audioRef$current$src === void 0 ? void 0 : _audioRef$current$src.getAudioTracks();\n    console.log('Audio tracks before toggle:', audioTracks); // Debugging tip\n    if (audioTracks) {\n      audioTracks.forEach(track => track.enabled = !isMuted);\n      setIsMuted(!isMuted);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleMute,\n      children: isMuted ? 'Unmute' : 'Mute'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioChat, \"sTm3QrvIACa8uup35p/McJlEvAc=\", false, function () {\n  return [useSession];\n});\n_c = AudioChat;\nexport default AudioChat;\nvar _c;\n$RefreshReg$(_c, \"AudioChat\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","useState","useMemo","useSession","jsxDEV","_jsxDEV","AudioChat","_s","sessionId","audioRef","socket","peerConnections","isMuted","setIsMuted","reconnectInterval","maxReconnectAttempts","reconnectAttemptsRef","config","iceServers","urls","handleOffer","offer","console","log","peerConnection","RTCPeerConnection","current","sender","setRemoteDescription","RTCSessionDescription","navigator","mediaDevices","getUserMedia","audio","then","stream","getTracks","forEach","track","addTrack","catch","error","message","createAnswer","answer","setLocalDescription","send","JSON","stringify","type","sdp","ontrack","event","streams","srcObject","onicecandidate","candidate","handleAnswer","handleNewICECandidateMsg","msg","RTCIceCandidate","addIceCandidate","connectWebSocket","WebSocket","onopen","onmessage","data","parse","onclose","warn","setTimeout","onerror","currentPeerConnections","_socket$current","close","Object","values","toggleMute","_audioRef$current$src","audioTracks","getAudioTracks","enabled","children","ref","autoPlay","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/wesle/OneDrive/Documents/VLCS/myProject/VirtualLCS/frontend/src/AudioChat.jsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback, useState, useMemo } from 'react';\r\nimport { useSession } from './SessionContext';\r\n\r\nconst AudioChat = () => {\r\n  const { sessionId } = useSession();\r\n  const audioRef = useRef(null);\r\n  const socket = useRef(null);\r\n  const peerConnections = useRef({});\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const reconnectInterval = 5000;\r\n  const maxReconnectAttempts = 5;\r\n  const reconnectAttemptsRef = useRef(0);\r\n\r\n  const config = useMemo(() => ({\r\n    iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],\r\n  }), []);\r\n\r\n  const handleOffer = useCallback((offer) => {\r\n    console.log('Received offer:', offer); // Debugging tip\r\n    const peerConnection = new RTCPeerConnection(config);\r\n    peerConnections.current[offer.sender] = peerConnection;\r\n\r\n    peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then((stream) => {\r\n        console.log('User media stream:', stream); // Debugging tip\r\n        stream.getTracks().forEach((track) => peerConnection.addTrack(track, stream));\r\n      })\r\n      .catch((error) => console.error('Error accessing user media:', error.message));\r\n\r\n    peerConnection.createAnswer()\r\n      .then((answer) => {\r\n        console.log('Created answer:', answer); // Debugging tip\r\n        peerConnection.setLocalDescription(answer);\r\n        socket.current.send(\r\n          JSON.stringify({\r\n            type: 'answer',\r\n            sdp: answer,\r\n            sender: 'client',\r\n          })\r\n        );\r\n      });\r\n\r\n    peerConnection.ontrack = (event) => {\r\n      console.log('Remote stream:', event.streams[0]); // Debugging tip\r\n      audioRef.current.srcObject = event.streams[0];\r\n    };\r\n\r\n    peerConnection.onicecandidate = (event) => {\r\n      console.log('ICE candidate:', event.candidate); // Debugging tip\r\n      if (event.candidate) {\r\n        socket.current.send(\r\n          JSON.stringify({\r\n            type: 'ice-candidate',\r\n            candidate: event.candidate,\r\n            sender: 'client',\r\n          })\r\n        );\r\n      }\r\n    };\r\n  }, [config]);\r\n\r\n  const handleAnswer = useCallback((answer) => {\r\n    console.log('Received answer:', answer); // Debugging tip\r\n    const peerConnection = peerConnections.current[answer.sender];\r\n    if (peerConnection) {\r\n      peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n    }\r\n  }, []);\r\n\r\n  const handleNewICECandidateMsg = useCallback((msg) => {\r\n    console.log('Received ICE candidate message:', msg); // Debugging tip\r\n    const candidate = new RTCIceCandidate(msg.candidate);\r\n    const peerConnection = peerConnections.current[msg.sender];\r\n    if (peerConnection) {\r\n      peerConnection.addIceCandidate(candidate);\r\n    }\r\n  }, []);\r\n\r\n  const connectWebSocket = useCallback(() => {\r\n    if (!sessionId) {\r\n      console.error('Session ID is undefined. Unable to initialize WebSocket.');\r\n      return;\r\n    }\r\n\r\n    socket.current = new WebSocket(`ws://127.0.0.1:8080/ws/session/${sessionId}/`);\r\n\r\n    socket.current.onopen = () => {\r\n      console.log('WebSocket connection established'); // Debugging tip\r\n      reconnectAttemptsRef.current = 0;\r\n      socket.current.send(JSON.stringify({ type: 'join', sessionId }));\r\n    };\r\n\r\n    socket.current.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      console.log('WebSocket message received:', data); // Debugging tip\r\n      if (data.type === 'offer') handleOffer(data);\r\n      if (data.type === 'answer') handleAnswer(data);\r\n      if (data.type === 'ice-candidate') handleNewICECandidateMsg(data);\r\n    };\r\n\r\n    socket.current.onclose = () => {\r\n      console.warn('WebSocket disconnected.');\r\n      if (reconnectAttemptsRef.current < maxReconnectAttempts) {\r\n        reconnectAttemptsRef.current += 1;\r\n        console.warn(`Attempting to reconnect (${reconnectAttemptsRef.current}/${maxReconnectAttempts})...`);\r\n        setTimeout(connectWebSocket, reconnectInterval);\r\n      } else {\r\n        console.error('Max reconnect attempts reached. Unable to reconnect WebSocket.');\r\n      }\r\n    };\r\n\r\n    socket.current.onerror = (error) => {\r\n      console.error('WebSocket error:', error.message);\r\n    };\r\n  }, [sessionId, handleOffer, handleAnswer, handleNewICECandidateMsg]);\r\n\r\n  useEffect(() => {\r\n    connectWebSocket();\r\n\r\n    const currentPeerConnections = peerConnections.current;\r\n\r\n    return () => {\r\n      socket.current?.close();\r\n      Object.values(currentPeerConnections).forEach((peerConnection) =>\r\n        peerConnection.close()\r\n      );\r\n    };\r\n  }, [connectWebSocket]);\r\n\r\n  const toggleMute = () => {\r\n    const audioTracks = audioRef.current.srcObject?.getAudioTracks();\r\n    console.log('Audio tracks before toggle:', audioTracks); // Debugging tip\r\n    if (audioTracks) {\r\n      audioTracks.forEach((track) => (track.enabled = !isMuted));\r\n      setIsMuted(!isMuted);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <audio ref={audioRef} autoPlay />\r\n      <button onClick={toggleMute}>{isMuted ? 'Unmute' : 'Mute'}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}