{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wesle\\\\OneDrive\\\\Documents\\\\VLCS\\\\myProject\\\\VirtualLCS\\\\frontend\\\\src\\\\DocumentCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Canvas, Image, util } from 'fabric';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DocumentCanvas = ({\n  documentUrl,\n  sessionId\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [canvas, setCanvas] = useState(null);\n  const socket = useRef(null); // WebSocket connection stored here\n  const reconnectInterval = 5000; // Reconnection interval (in milliseconds)\n\n  useEffect(() => {\n    console.log('Initializing canvas...');\n    // Create a Fabric.js canvas instance\n    const canvasInstance = new Canvas(canvasRef.current);\n    setCanvas(canvasInstance);\n\n    // Load the background image\n    if (documentUrl) {\n      Image.fromURL(documentUrl, img => {\n        canvasInstance.setBackgroundImage(img, canvasInstance.renderAll.bind(canvasInstance), {\n          crossOrigin: 'anonymous' // Prevent cross-origin issues\n        });\n        console.log('Document URL:', documentUrl);\n      }, {\n        crossOrigin: 'anonymous'\n      });\n    } else {\n      console.warn('No document URL provided.');\n    }\n\n    // Function to establish a WebSocket connection\n    const connectWebSocket = () => {\n      if (!sessionId) {\n        console.error('Session ID is undefined. Unable to initialize WebSocket.');\n        return;\n      }\n      socket.current = new WebSocket(`ws://localhost:8080/ws/session/${sessionId}/`);\n      socket.current.onopen = () => {\n        console.log('WebSocket connection established.');\n      };\n      socket.current.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'draw') {\n          console.log('Received draw data:', data.payload);\n          util.enlivenObjects([data.payload], objects => {\n            objects.forEach(obj => {\n              if (canvasInstance) {\n                canvasInstance.add(obj);\n              }\n            });\n          });\n        }\n      };\n      socket.current.onclose = () => {\n        console.warn('WebSocket disconnected. Attempting to reconnect...');\n        setTimeout(connectWebSocket, reconnectInterval);\n      };\n      socket.current.onerror = error => {\n        console.error('WebSocket error:', error.message);\n      };\n    };\n\n    // Initialize WebSocket connection\n    connectWebSocket();\n\n    // Emit data when an object is added to the canvas\n    const emitObjectData = object => {\n      try {\n        if (socket.current) {\n          socket.current.send(JSON.stringify({\n            type: 'draw',\n            payload: object.toJSON()\n          }));\n          console.log('Object emitted:', object);\n        }\n      } catch (error) {\n        console.error('Error emitting object data:', error.message);\n      }\n    };\n    canvasInstance.on('object:added', e => {\n      const object = e.target;\n      emitObjectData(object);\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      canvasInstance.dispose();\n      if (socket.current) {\n        socket.current.close();\n      }\n    };\n  }, [documentUrl, sessionId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 800,\n      height: 600\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), !documentUrl && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: \"No document available to load.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(DocumentCanvas, \"aeX+t4KdWuRcxCeTxitfhcBY8J4=\");\n_c = DocumentCanvas;\nexport default DocumentCanvas;\nvar _c;\n$RefreshReg$(_c, \"DocumentCanvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Canvas","Image","util","jsxDEV","_jsxDEV","DocumentCanvas","documentUrl","sessionId","_s","canvasRef","canvas","setCanvas","socket","reconnectInterval","console","log","canvasInstance","current","fromURL","img","setBackgroundImage","renderAll","bind","crossOrigin","warn","connectWebSocket","error","WebSocket","onopen","onmessage","event","data","JSON","parse","type","payload","enlivenObjects","objects","forEach","obj","add","onclose","setTimeout","onerror","message","emitObjectData","object","send","stringify","toJSON","on","e","target","dispose","close","children","ref","width","height","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["C:/Users/wesle/OneDrive/Documents/VLCS/myProject/VirtualLCS/frontend/src/DocumentCanvas.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { Canvas, Image, util } from 'fabric';\r\n\r\nconst DocumentCanvas = ({ documentUrl, sessionId }) => {\r\n  const canvasRef = useRef(null);\r\n  const [canvas, setCanvas] = useState(null);\r\n  const socket = useRef(null); // WebSocket connection stored here\r\n  const reconnectInterval = 5000; // Reconnection interval (in milliseconds)\r\n\r\n  useEffect(() => {\r\n    console.log('Initializing canvas...');\r\n    // Create a Fabric.js canvas instance\r\n    const canvasInstance = new Canvas(canvasRef.current);\r\n    setCanvas(canvasInstance);\r\n\r\n    // Load the background image\r\n    if (documentUrl) {\r\n      Image.fromURL(\r\n        documentUrl,\r\n        (img) => {\r\n          canvasInstance.setBackgroundImage(\r\n            img,\r\n            canvasInstance.renderAll.bind(canvasInstance),\r\n            {\r\n              crossOrigin: 'anonymous', // Prevent cross-origin issues\r\n            }\r\n          );\r\n          console.log('Document URL:', documentUrl);\r\n        },\r\n        { crossOrigin: 'anonymous' }\r\n      );\r\n    } else {\r\n      console.warn('No document URL provided.');\r\n    }\r\n\r\n    // Function to establish a WebSocket connection\r\n    const connectWebSocket = () => {\r\n      if (!sessionId) {\r\n        console.error('Session ID is undefined. Unable to initialize WebSocket.');\r\n        return;\r\n      }\r\n\r\n      socket.current = new WebSocket(`ws://localhost:8080/ws/session/${sessionId}/`);\r\n\r\n      socket.current.onopen = () => {\r\n        console.log('WebSocket connection established.');\r\n      };\r\n\r\n      socket.current.onmessage = (event) => {\r\n        const data = JSON.parse(event.data);\r\n        if (data.type === 'draw') {\r\n          console.log('Received draw data:', data.payload);\r\n          util.enlivenObjects([data.payload], (objects) => {\r\n            objects.forEach((obj) => {\r\n              if (canvasInstance) {\r\n                canvasInstance.add(obj);\r\n              }\r\n            });\r\n          });\r\n        }\r\n      };\r\n\r\n      socket.current.onclose = () => {\r\n        console.warn('WebSocket disconnected. Attempting to reconnect...');\r\n        setTimeout(connectWebSocket, reconnectInterval);\r\n      };\r\n\r\n      socket.current.onerror = (error) => {\r\n        console.error('WebSocket error:', error.message);\r\n      };\r\n    };\r\n\r\n    // Initialize WebSocket connection\r\n    connectWebSocket();\r\n\r\n    // Emit data when an object is added to the canvas\r\n    const emitObjectData = (object) => {\r\n      try {\r\n        if (socket.current) {\r\n          socket.current.send(\r\n            JSON.stringify({\r\n              type: 'draw',\r\n              payload: object.toJSON(),\r\n            })\r\n          );\r\n          console.log('Object emitted:', object);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error emitting object data:', error.message);\r\n      }\r\n    };\r\n\r\n    canvasInstance.on('object:added', (e) => {\r\n      const object = e.target;\r\n      emitObjectData(object);\r\n    });\r\n\r\n    // Cleanup on component unmount\r\n    return () => {\r\n      canvasInstance.dispose();\r\n      if (socket.current) {\r\n        socket.current.close();\r\n      }\r\n    };\r\n  }, [documentUrl, sessionId]);\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef} width={800} height={600} />\r\n      {!documentUrl && <p style={{ color: 'red' }}>No document available to load.</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DocumentCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}