{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wesle\\\\OneDrive\\\\Documents\\\\VLCS\\\\myProject\\\\VirtualLCS\\\\frontend\\\\src\\\\AudioChat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioChat = ({\n  sessionId\n}) => {\n  _s();\n  const audioRef = useRef(null);\n  const socket = useRef(null);\n  const peerConnections = useRef({}); // Peer connections stored here\n  const [isMuted, setIsMuted] = useState(false); // Mute/unmute state\n  const config = {\n    iceServers: [{\n      urls: 'stun:stun.l.google.com:19302'\n    }]\n  };\n  const reconnectInterval = 5000; // Reconnection interval\n  const maxReconnectAttempts = 5;\n  const reconnectAttemptsRef = useRef(0); // Use ref to preserve mutable state across renders\n\n  const handleOffer = useCallback(offer => {\n    const peerConnection = new RTCPeerConnection(config);\n    peerConnections.current[offer.sender] = peerConnection;\n    peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n    }).catch(error => console.error('Error accessing user media:', error.message));\n    peerConnection.createAnswer().then(answer => {\n      peerConnection.setLocalDescription(answer);\n      socket.current.send(JSON.stringify({\n        type: 'answer',\n        sdp: answer,\n        sender: 'client'\n      }));\n    });\n    peerConnection.ontrack = event => {\n      audioRef.current.srcObject = event.streams[0];\n    };\n    peerConnection.onicecandidate = event => {\n      if (event.candidate) {\n        socket.current.send(JSON.stringify({\n          type: 'ice-candidate',\n          candidate: event.candidate,\n          sender: 'client'\n        }));\n      }\n    };\n  }, [config]);\n  const handleAnswer = useCallback(answer => {\n    const peerConnection = peerConnections.current[answer.sender];\n    if (peerConnection) {\n      peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n    }\n  }, []);\n  const handleNewICECandidateMsg = useCallback(msg => {\n    const candidate = new RTCIceCandidate(msg.candidate);\n    const peerConnection = peerConnections.current[msg.sender];\n    if (peerConnection) {\n      peerConnection.addIceCandidate(candidate);\n    }\n  }, []);\n  const connectWebSocket = useCallback(() => {\n    if (!sessionId) {\n      console.error('Session ID is undefined. Unable to initialize WebSocket.');\n      return;\n    }\n    socket.current = new WebSocket(`ws://127.0.0.1:8080/ws/session/${sessionId}/`);\n    socket.current.onopen = () => {\n      console.log('WebSocket connection established');\n      reconnectAttemptsRef.current = 0; // Reset reconnect attempts\n      socket.current.send(JSON.stringify({\n        type: 'join',\n        sessionId\n      }));\n    };\n    socket.current.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'offer') handleOffer(data);\n      if (data.type === 'answer') handleAnswer(data);\n      if (data.type === 'ice-candidate') handleNewICECandidateMsg(data);\n    };\n    socket.current.onclose = () => {\n      console.warn('WebSocket disconnected.');\n      if (reconnectAttemptsRef.current < maxReconnectAttempts) {\n        reconnectAttemptsRef.current += 1;\n        console.warn(`Attempting to reconnect (${reconnectAttemptsRef.current}/${maxReconnectAttempts})...`);\n        setTimeout(connectWebSocket, reconnectInterval);\n      } else {\n        console.error('Max reconnect attempts reached. Unable to reconnect WebSocket.');\n      }\n    };\n    socket.current.onerror = error => {\n      console.error('WebSocket error:', error.message);\n    };\n  }, [sessionId, handleOffer, handleAnswer, handleNewICECandidateMsg]);\n  useEffect(() => {\n    connectWebSocket();\n    return () => {\n      var _socket$current;\n      (_socket$current = socket.current) === null || _socket$current === void 0 ? void 0 : _socket$current.close();\n      Object.values(peerConnections.current).forEach(peerConnection => peerConnection.close());\n    };\n  }, [connectWebSocket]);\n  const toggleMute = () => {\n    var _audioRef$current$src;\n    const audioTracks = (_audioRef$current$src = audioRef.current.srcObject) === null || _audioRef$current$src === void 0 ? void 0 : _audioRef$current$src.getAudioTracks();\n    if (audioTracks) {\n      audioTracks.forEach(track => track.enabled = !isMuted);\n      setIsMuted(!isMuted);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleMute,\n      children: isMuted ? 'Unmute' : 'Mute'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioChat, \"ZQADljG5sCfIXT5Jn2fFgsQkfgA=\");\n_c = AudioChat;\nexport default AudioChat;\nvar _c;\n$RefreshReg$(_c, \"AudioChat\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","useState","jsxDEV","_jsxDEV","AudioChat","sessionId","_s","audioRef","socket","peerConnections","isMuted","setIsMuted","config","iceServers","urls","reconnectInterval","maxReconnectAttempts","reconnectAttemptsRef","handleOffer","offer","peerConnection","RTCPeerConnection","current","sender","setRemoteDescription","RTCSessionDescription","navigator","mediaDevices","getUserMedia","audio","then","stream","getTracks","forEach","track","addTrack","catch","error","console","message","createAnswer","answer","setLocalDescription","send","JSON","stringify","type","sdp","ontrack","event","srcObject","streams","onicecandidate","candidate","handleAnswer","handleNewICECandidateMsg","msg","RTCIceCandidate","addIceCandidate","connectWebSocket","WebSocket","onopen","log","onmessage","data","parse","onclose","warn","setTimeout","onerror","_socket$current","close","Object","values","toggleMute","_audioRef$current$src","audioTracks","getAudioTracks","enabled","children","ref","autoPlay","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/wesle/OneDrive/Documents/VLCS/myProject/VirtualLCS/frontend/src/AudioChat.jsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback, useState } from 'react';\r\n\r\nconst AudioChat = ({ sessionId }) => {\r\n  const audioRef = useRef(null);\r\n  const socket = useRef(null);\r\n  const peerConnections = useRef({}); // Peer connections stored here\r\n  const [isMuted, setIsMuted] = useState(false); // Mute/unmute state\r\n  const config = {\r\n    iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],\r\n  };\r\n  const reconnectInterval = 5000; // Reconnection interval\r\n  const maxReconnectAttempts = 5;\r\n  const reconnectAttemptsRef = useRef(0); // Use ref to preserve mutable state across renders\r\n\r\n  const handleOffer = useCallback((offer) => {\r\n    const peerConnection = new RTCPeerConnection(config);\r\n    peerConnections.current[offer.sender] = peerConnection;\r\n\r\n    peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then((stream) => {\r\n        stream.getTracks().forEach((track) => peerConnection.addTrack(track, stream));\r\n      })\r\n      .catch((error) => console.error('Error accessing user media:', error.message));\r\n    \r\n    peerConnection.createAnswer()\r\n      .then((answer) => {\r\n        peerConnection.setLocalDescription(answer);\r\n        socket.current.send(\r\n          JSON.stringify({\r\n            type: 'answer',\r\n            sdp: answer,\r\n            sender: 'client',\r\n          })\r\n        );\r\n      });\r\n    \r\n    peerConnection.ontrack = (event) => {\r\n      audioRef.current.srcObject = event.streams[0];\r\n    };\r\n    peerConnection.onicecandidate = (event) => {\r\n      if (event.candidate) {\r\n        socket.current.send(\r\n          JSON.stringify({\r\n            type: 'ice-candidate',\r\n            candidate: event.candidate,\r\n            sender: 'client',\r\n          })\r\n        );\r\n      }\r\n    };\r\n  }, [config]);\r\n\r\n  const handleAnswer = useCallback((answer) => {\r\n    const peerConnection = peerConnections.current[answer.sender];\r\n    if (peerConnection) {\r\n      peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n    }\r\n  }, []);\r\n\r\n  const handleNewICECandidateMsg = useCallback((msg) => {\r\n    const candidate = new RTCIceCandidate(msg.candidate);\r\n    const peerConnection = peerConnections.current[msg.sender];\r\n    if (peerConnection) {\r\n      peerConnection.addIceCandidate(candidate);\r\n    }\r\n  }, []);\r\n\r\n  const connectWebSocket = useCallback(() => {\r\n    if (!sessionId) {\r\n      console.error('Session ID is undefined. Unable to initialize WebSocket.');\r\n      return;\r\n    }\r\n\r\n    socket.current = new WebSocket(`ws://127.0.0.1:8080/ws/session/${sessionId}/`);\r\n\r\n    socket.current.onopen = () => {\r\n      console.log('WebSocket connection established');\r\n      reconnectAttemptsRef.current = 0; // Reset reconnect attempts\r\n      socket.current.send(JSON.stringify({ type: 'join', sessionId }));\r\n    };\r\n\r\n    socket.current.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      if (data.type === 'offer') handleOffer(data);\r\n      if (data.type === 'answer') handleAnswer(data);\r\n      if (data.type === 'ice-candidate') handleNewICECandidateMsg(data);\r\n    };\r\n\r\n    socket.current.onclose = () => {\r\n      console.warn('WebSocket disconnected.');\r\n      if (reconnectAttemptsRef.current < maxReconnectAttempts) {\r\n        reconnectAttemptsRef.current += 1;\r\n        console.warn(`Attempting to reconnect (${reconnectAttemptsRef.current}/${maxReconnectAttempts})...`);\r\n        setTimeout(connectWebSocket, reconnectInterval);\r\n      } else {\r\n        console.error('Max reconnect attempts reached. Unable to reconnect WebSocket.');\r\n      }\r\n    };\r\n\r\n    socket.current.onerror = (error) => {\r\n      console.error('WebSocket error:', error.message);\r\n    };\r\n  }, [sessionId, handleOffer, handleAnswer, handleNewICECandidateMsg]);\r\n\r\n  useEffect(() => {\r\n    connectWebSocket();\r\n\r\n    return () => {\r\n      socket.current?.close();\r\n      Object.values(peerConnections.current).forEach((peerConnection) => peerConnection.close());\r\n    };\r\n  }, [connectWebSocket]);\r\n\r\n  const toggleMute = () => {\r\n    const audioTracks = audioRef.current.srcObject?.getAudioTracks();\r\n    if (audioTracks) {\r\n      audioTracks.forEach((track) => (track.enabled = !isMuted));\r\n      setIsMuted(!isMuted);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <audio ref={audioRef} autoPlay />\r\n      <button onClick={toggleMute}>{isMuted ? 'Unmute' : 'Mute'}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}